import generators ;
import type ;
import feature ;
import toolset ;

generators.register-standard $(__name__).slicer : SLICE : CPP CPP(slicer-%) H : <slicer>yes ;
generators.override $(__name__).slicer : slice.slicer ;
generators.register-standard $(__name__).slicer.pure : SLICE : CPP(slicer-%) : <slicer>pure ;
generators.override $(__name__).slicer.pure : slice.slicer.pure ;
feature.feature slicerbin : : free dependency ;
toolset.flags slicer SLICERBIN <slicerbin> ;
toolset.flags slicer INCLUDES <include> ;

actions slicer bind SLICERBIN
{
  slice2cpp -I"$(INCLUDES)" --checksum --output-dir $(1[1]:D) $(2) --dll-export JAM_DLL_PUBLIC
	"$(SLICERBIN)" -I"$(INCLUDES)" $(2) $(1[2]) --headerPrefix="\"\""
}

actions slicer.pure bind SLICERBIN
{
	"$(SLICERBIN)" -I"$(INCLUDES)" $(2) $(1[1]) --headerPrefix="\"\""
}

